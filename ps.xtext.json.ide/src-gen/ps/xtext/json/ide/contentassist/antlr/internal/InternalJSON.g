/*
 * generated by Xtext 2.12.0
 */
grammar InternalJSON;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package ps.xtext.json.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package ps.xtext.json.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import ps.xtext.json.services.JSONGrammarAccess;

}
@parser::members {
	private JSONGrammarAccess grammarAccess;

	public void setGrammarAccess(JSONGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleValue
entryRuleValue
:
{ before(grammarAccess.getValueRule()); }
	 ruleValue
{ after(grammarAccess.getValueRule()); } 
	 EOF 
;

// Rule Value
ruleValue 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getValueAccess().getAlternatives()); }
		(rule__Value__Alternatives)
		{ after(grammarAccess.getValueAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleObject
entryRuleObject
:
{ before(grammarAccess.getObjectRule()); }
	 ruleObject
{ after(grammarAccess.getObjectRule()); } 
	 EOF 
;

// Rule Object
ruleObject 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getObjectAccess().getGroup()); }
		(rule__Object__Group__0)
		{ after(grammarAccess.getObjectAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePair
entryRulePair
:
{ before(grammarAccess.getPairRule()); }
	 rulePair
{ after(grammarAccess.getPairRule()); } 
	 EOF 
;

// Rule Pair
rulePair 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPairAccess().getGroup()); }
		(rule__Pair__Group__0)
		{ after(grammarAccess.getPairAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleArray
entryRuleArray
:
{ before(grammarAccess.getArrayRule()); }
	 ruleArray
{ after(grammarAccess.getArrayRule()); } 
	 EOF 
;

// Rule Array
ruleArray 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getArrayAccess().getGroup()); }
		(rule__Array__Group__0)
		{ after(grammarAccess.getArrayAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleNumber
entryRuleNumber
:
{ before(grammarAccess.getNumberRule()); }
	 ruleNumber
{ after(grammarAccess.getNumberRule()); } 
	 EOF 
;

// Rule Number
ruleNumber 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getNumberAccess().getGroup()); }
		(rule__Number__Group__0)
		{ after(grammarAccess.getNumberAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleStr
entryRuleStr
:
{ before(grammarAccess.getStrRule()); }
	 ruleStr
{ after(grammarAccess.getStrRule()); } 
	 EOF 
;

// Rule Str
ruleStr 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getStrAccess().getGroup()); }
		(rule__Str__Group__0)
		{ after(grammarAccess.getStrAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleBoolean
entryRuleBoolean
:
{ before(grammarAccess.getBooleanRule()); }
	 ruleBoolean
{ after(grammarAccess.getBooleanRule()); } 
	 EOF 
;

// Rule Boolean
ruleBoolean 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getBooleanAccess().getAlternatives()); }
		(rule__Boolean__Alternatives)
		{ after(grammarAccess.getBooleanAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleNull
entryRuleNull
:
{ before(grammarAccess.getNullRule()); }
	 ruleNull
{ after(grammarAccess.getNullRule()); } 
	 EOF 
;

// Rule Null
ruleNull 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getNullAccess().getGroup()); }
		(rule__Null__Group__0)
		{ after(grammarAccess.getNullAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Value__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getValueAccess().getObjectParserRuleCall_0()); }
		ruleObject
		{ after(grammarAccess.getValueAccess().getObjectParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getValueAccess().getArrayParserRuleCall_1()); }
		ruleArray
		{ after(grammarAccess.getValueAccess().getArrayParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getValueAccess().getNumberParserRuleCall_2()); }
		ruleNumber
		{ after(grammarAccess.getValueAccess().getNumberParserRuleCall_2()); }
	)
	|
	(
		{ before(grammarAccess.getValueAccess().getStrParserRuleCall_3()); }
		ruleStr
		{ after(grammarAccess.getValueAccess().getStrParserRuleCall_3()); }
	)
	|
	(
		{ before(grammarAccess.getValueAccess().getBooleanParserRuleCall_4()); }
		ruleBoolean
		{ after(grammarAccess.getValueAccess().getBooleanParserRuleCall_4()); }
	)
	|
	(
		{ before(grammarAccess.getValueAccess().getNullParserRuleCall_5()); }
		ruleNull
		{ after(grammarAccess.getValueAccess().getNullParserRuleCall_5()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Boolean__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBooleanAccess().getGroup_0()); }
		(rule__Boolean__Group_0__0)
		{ after(grammarAccess.getBooleanAccess().getGroup_0()); }
	)
	|
	(
		{ before(grammarAccess.getBooleanAccess().getGroup_1()); }
		(rule__Boolean__Group_1__0)
		{ after(grammarAccess.getBooleanAccess().getGroup_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Object__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Object__Group__0__Impl
	rule__Object__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Object__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getObjectAccess().getObjectAction_0()); }
	()
	{ after(grammarAccess.getObjectAccess().getObjectAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Object__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Object__Group__1__Impl
	rule__Object__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Object__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getObjectAccess().getLeftCurlyBracketKeyword_1()); }
	'{'
	{ after(grammarAccess.getObjectAccess().getLeftCurlyBracketKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Object__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Object__Group__2__Impl
	rule__Object__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Object__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getObjectAccess().getGroup_2()); }
	(rule__Object__Group_2__0)?
	{ after(grammarAccess.getObjectAccess().getGroup_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Object__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Object__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Object__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getObjectAccess().getRightCurlyBracketKeyword_3()); }
	'}'
	{ after(grammarAccess.getObjectAccess().getRightCurlyBracketKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Object__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Object__Group_2__0__Impl
	rule__Object__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Object__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getObjectAccess().getPairsAssignment_2_0()); }
	(rule__Object__PairsAssignment_2_0)
	{ after(grammarAccess.getObjectAccess().getPairsAssignment_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Object__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Object__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Object__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getObjectAccess().getGroup_2_1()); }
	(rule__Object__Group_2_1__0)*
	{ after(grammarAccess.getObjectAccess().getGroup_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Object__Group_2_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Object__Group_2_1__0__Impl
	rule__Object__Group_2_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Object__Group_2_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getObjectAccess().getCommaKeyword_2_1_0()); }
	','
	{ after(grammarAccess.getObjectAccess().getCommaKeyword_2_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Object__Group_2_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Object__Group_2_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Object__Group_2_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getObjectAccess().getPairsAssignment_2_1_1()); }
	(rule__Object__PairsAssignment_2_1_1)
	{ after(grammarAccess.getObjectAccess().getPairsAssignment_2_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Pair__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Pair__Group__0__Impl
	rule__Pair__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Pair__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPairAccess().getStringAssignment_0()); }
	(rule__Pair__StringAssignment_0)
	{ after(grammarAccess.getPairAccess().getStringAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Pair__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Pair__Group__1__Impl
	rule__Pair__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Pair__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPairAccess().getColonKeyword_1()); }
	':'
	{ after(grammarAccess.getPairAccess().getColonKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Pair__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Pair__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Pair__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPairAccess().getValueAssignment_2()); }
	(rule__Pair__ValueAssignment_2)
	{ after(grammarAccess.getPairAccess().getValueAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Array__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Array__Group__0__Impl
	rule__Array__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Array__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getArrayAccess().getArrayAction_0()); }
	()
	{ after(grammarAccess.getArrayAccess().getArrayAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Array__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Array__Group__1__Impl
	rule__Array__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Array__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getArrayAccess().getLeftSquareBracketKeyword_1()); }
	'['
	{ after(grammarAccess.getArrayAccess().getLeftSquareBracketKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Array__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Array__Group__2__Impl
	rule__Array__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Array__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getArrayAccess().getGroup_2()); }
	(rule__Array__Group_2__0)?
	{ after(grammarAccess.getArrayAccess().getGroup_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Array__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Array__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Array__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getArrayAccess().getRightSquareBracketKeyword_3()); }
	']'
	{ after(grammarAccess.getArrayAccess().getRightSquareBracketKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Array__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Array__Group_2__0__Impl
	rule__Array__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Array__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getArrayAccess().getValuesAssignment_2_0()); }
	(rule__Array__ValuesAssignment_2_0)
	{ after(grammarAccess.getArrayAccess().getValuesAssignment_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Array__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Array__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Array__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getArrayAccess().getGroup_2_1()); }
	(rule__Array__Group_2_1__0)*
	{ after(grammarAccess.getArrayAccess().getGroup_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Array__Group_2_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Array__Group_2_1__0__Impl
	rule__Array__Group_2_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Array__Group_2_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getArrayAccess().getCommaKeyword_2_1_0()); }
	','
	{ after(grammarAccess.getArrayAccess().getCommaKeyword_2_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Array__Group_2_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Array__Group_2_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Array__Group_2_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getArrayAccess().getValuesAssignment_2_1_1()); }
	(rule__Array__ValuesAssignment_2_1_1)
	{ after(grammarAccess.getArrayAccess().getValuesAssignment_2_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Number__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Number__Group__0__Impl
	rule__Number__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Number__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNumberAccess().getNumberAction_0()); }
	()
	{ after(grammarAccess.getNumberAccess().getNumberAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Number__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Number__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Number__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNumberAccess().getJSONNUMBERTerminalRuleCall_1()); }
	RULE_JSONNUMBER
	{ after(grammarAccess.getNumberAccess().getJSONNUMBERTerminalRuleCall_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Str__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Str__Group__0__Impl
	rule__Str__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Str__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStrAccess().getStrAction_0()); }
	()
	{ after(grammarAccess.getStrAccess().getStrAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Str__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Str__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Str__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStrAccess().getSTRINGTerminalRuleCall_1()); }
	RULE_STRING
	{ after(grammarAccess.getStrAccess().getSTRINGTerminalRuleCall_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Boolean__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Boolean__Group_0__0__Impl
	rule__Boolean__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Boolean__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBooleanAccess().getTrueAction_0_0()); }
	()
	{ after(grammarAccess.getBooleanAccess().getTrueAction_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Boolean__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Boolean__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Boolean__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBooleanAccess().getTrueKeyword_0_1()); }
	'true'
	{ after(grammarAccess.getBooleanAccess().getTrueKeyword_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Boolean__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Boolean__Group_1__0__Impl
	rule__Boolean__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Boolean__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBooleanAccess().getFalseAction_1_0()); }
	()
	{ after(grammarAccess.getBooleanAccess().getFalseAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Boolean__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Boolean__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Boolean__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBooleanAccess().getFalseKeyword_1_1()); }
	'false'
	{ after(grammarAccess.getBooleanAccess().getFalseKeyword_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Null__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Null__Group__0__Impl
	rule__Null__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Null__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNullAccess().getNullAction_0()); }
	()
	{ after(grammarAccess.getNullAccess().getNullAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Null__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Null__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Null__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNullAccess().getNullKeyword_1()); }
	'null'
	{ after(grammarAccess.getNullAccess().getNullKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Object__PairsAssignment_2_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getObjectAccess().getPairsPairParserRuleCall_2_0_0()); }
		rulePair
		{ after(grammarAccess.getObjectAccess().getPairsPairParserRuleCall_2_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Object__PairsAssignment_2_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getObjectAccess().getPairsPairParserRuleCall_2_1_1_0()); }
		rulePair
		{ after(grammarAccess.getObjectAccess().getPairsPairParserRuleCall_2_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Pair__StringAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPairAccess().getStringSTRINGTerminalRuleCall_0_0()); }
		RULE_STRING
		{ after(grammarAccess.getPairAccess().getStringSTRINGTerminalRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Pair__ValueAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPairAccess().getValueValueParserRuleCall_2_0()); }
		ruleValue
		{ after(grammarAccess.getPairAccess().getValueValueParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Array__ValuesAssignment_2_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getArrayAccess().getValuesValueParserRuleCall_2_0_0()); }
		ruleValue
		{ after(grammarAccess.getArrayAccess().getValuesValueParserRuleCall_2_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Array__ValuesAssignment_2_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getArrayAccess().getValuesValueParserRuleCall_2_1_1_0()); }
		ruleValue
		{ after(grammarAccess.getArrayAccess().getValuesValueParserRuleCall_2_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_JSONNUMBER : '-'? ('0'|'1'..'9' RULE_DIGIT*) ('.' RULE_DIGIT+)? (('E'|'e') ('+'|'-')? RULE_DIGIT+)?;

fragment RULE_DIGIT : '0'..'9';

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
